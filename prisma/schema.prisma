// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role{
  GARAGE_OWNER
  GARAGE_ADMIN
  SUBACCOUNT_USER
  SUBACCOUNT_GUEST
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
}

model User {
  id                    String          @id @map("_id")
  name                  String
  email                 String          @unique
  avatarUrl             String          @db.String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  role                  Role            @default(SUBACCOUNT_USER)
  garageId              String?         
  Garage                Garage?         @relation(fields: [garageId],references: [id], onDelete: Cascade)
  Permissions           Permissions[]
  Ticket               Ticket[]
  Notification          Notification[]

  @@index([garageId])
}

model Permissions {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  email                 String
  User                  User            @relation(fields: [email], references: [email], onDelete: Cascade)
  subAccountId          String          
  SubAccount            SubAccount      @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  access                Boolean
  
  @@index([subAccountId])
  @@index([email])
}

model Garage{
  id                    String          @id @default(uuid()) @map("_id")
  connectAccountId      String?         @default("")
  name                  String
  garageLogo            String          @db.String
  companyEmail          String          @db.String
  companyPhone          String
  whiteLabel            Boolean         @default(true)
  address               String
  city                  String
  zipCode               String
  state                 String
  country               String
  goal                  Int             @default(5)
  users                 User[]
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  subAccount            SubAccount[]
  SidebarOption         GarageSidebarOption[]
  Invitation            Invitation[]
  Notification          Notification[]
  Subscription          Subscription?
  AddOns                AddOns[]
}

model SubAccount {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  connectedAccountId    String?
  name                  String
  subAccountLogo        String          @db.String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  companyEmail          String          @db.String
  companyPhone          String
  address               String
  city                  String
  zipCode               String
  state                 String
  country               String
  goal                  Int             @default(5)
  garageId              String         
  Garage                Garage          @relation(fields: [garageId], references: [id], onDelete: Cascade)
  SidebarOption         SubAccountSidebarOption[]
  Permissions           Permissions[]
  Funnels               Funnel[]
  Media                 Media[]
  Contact               Contact[]
  Trigger               Trigger[]
  Automation            Automation[]
  Pipeline              Pipeline[]
  Tags                  Tag[]
  Notification          Notification[]

  @@index([garageId])
}

model Contact {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  email                 String
  firstName             String
  lastName              String
  phone                 String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  vehicles              Vehicle[]
  subAccountId          String         
  SubAccount            SubAccount      @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Ticket                Ticket[]

  @@index([subAccountId])
}

model Vehicle {
  id                      String            @id @default(auto()) @map("_id") @db.ObjectId
  registrationNumber      String            @unique
  make                    String
  model                   String?
  yearOfManufacture       Int?
  fuelType                FuelType
  colour                  String
  engineCapacity          Int?
  co2Emissions            Int?
  revenueWeight           Int?
  typeApproval            String?
  wheelplan               String?
  dateOfLastV5CIssued     DateTime?
  markedForExport         Boolean?
  taxStatus               String?
  taxDueDate              DateTime?
  motStatus               String?
  motExpiryDate           DateTime?
  monthOfFirstRegistration String?
  manufactureDate         DateTime?
  registrationDate        DateTime?
  motRecords              MOTRecord[]
  appointments            Appointment[]
  contact                 Contact?          @relation(fields: [contactId], references: [id])
  contactId               String?
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  motExpiredDays          Int?
  createdDaysDifference   Int?
  reminderSent            Boolean?          @default(false)
  forceUpdate             Boolean?          @default(false)
}

model MOTRecord {
  id                 String                 @id @default(auto()) @map("_id") @db.ObjectId
  vehicle            Vehicle                @relation(fields: [vehicleId], references: [id])
  vehicleId          String
  completedDate      DateTime
  testResult         String
  expiryDate         DateTime
  mileage            Int
  notes              String?
}

model Appointment {
  id                         String           @id @default(auto()) @map("_id") @db.ObjectId
  vehicleId                  String
  vehicle                    Vehicle          @relation(fields: [vehicleId], references: [id])
  appointmentDateTime        DateTime
  appointmentDateTimeLondon  DateTime?
  appointmentTime            String?
  rescheduleLink             String?
  cancelLink                 String?
  cancelled                  Boolean?         @default(false)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  hoursDiff                  Int?
}

model Tag {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  color                 String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  subAccountId          String         

  SubAccount            SubAccount      @relation(fields: [subAccountId], references: [id], onDelete: Cascade)      
  TicketTags            TicketTag[] 

  @@index([subAccountId])
}

model Pipeline {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  Lane                  Lane[]
  subAccountId          String         
  SubAccount            SubAccount      @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model Lane {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  pipelineId            String         
  Pipeline              Pipeline        @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  Tickets               Ticket[]
  order                 Int             @default(0)

  @@index([pipelineId])
}

model Ticket {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  laneId                String         
  order                 Int             @default(0)
  Lane                  Lane            @relation(fields: [laneId], references: [id], onDelete: Cascade)
  value                 Float?
  description           String?       
  TicketTags            TicketTag[]         

  customerId            String?         
  Customer              Contact?        @relation(fields: [customerId], references: [id], onDelete: SetNull)

  assignedUserId        String?         
  Assigned              User?           @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)


  @@index([laneId])
  @@index([customerId])
  @@index([assignedUserId])
}

model TicketTag {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  ticketId  String  
  tagId     String  

  Ticket    Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  Tag       Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([ticketId, tagId]) // Ensures a tag isn't duplicated for a ticket
  @@index([ticketId])
  @@index([tagId])
}

model SubAccountSidebarOption {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String          @default("Menu")
  link                  String          @default("#")
  icon                  Icon            @default(info)
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  subAccountId          String?          
  SubAccount            SubAccount?      @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

enum InvitationStatus {
  ACCEPTED
  REVOKED
  PENDING
}

model Invitation {
  id                    String            @id @default(auto()) @map("_id") @db.ObjectId
  email                 String            @unique
  garageId              String           
  Garage                Garage            @relation(fields: [garageId], references: [id], onDelete: Cascade)
  status                InvitationStatus  @default(PENDING)  
  role                  Role              @default(SUBACCOUNT_USER)

  @@index([garageId])
}

model Media {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  type                  String?
  name                  String
  link                  String          @unique
  subAccountId          String         
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  SubAccount            SubAccount      @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  @@index([subAccountId])
}

model Funnel {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  description           String?
  published             Boolean         @default(false)
  subDomainName         String?         @unique
  favicon               String?         @db.String
  subAccountId          String         
  SubAccount            SubAccount      @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  FunnelPages           FunnelPage[]
  liveProducts          String?         @default("[]")
  ClassName             ClassName[]

  @@index([subAccountId])
}

model ClassName {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  color                 String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  funnelId              String         
  customData            String?         @db.String
  Funnel                Funnel          @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model FunnelPage {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  pathName              String          @default("")
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  visits                Int             @default(0)
  content               String          @db.String
  order                 Int
  previewImage          String?         @db.String
  funnelId              String         
  Funnel                Funnel          @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model GarageSidebarOption {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String          @default("Menu")
  link                  String          @default("#")
  icon                  Icon            @default(info)
  garageId              String         
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  Garage                Garage      @relation(fields: [garageId], references: [id], onDelete: Cascade)

  @@index([garageId])
}

enum TriggerTypes {
  CONTACT_FORM
}

model Trigger {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  type                  TriggerTypes
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  subAccountId          String         
  SubAccount            SubAccount      @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Automations           Automation[]

  @@index([subAccountId])
}

model Automation {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  triggerId             String?        
  published             Boolean         @default(false)
  Trigger               Trigger?        @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  subAccountId          String         
  SubAccount            SubAccount      @relation(fields: [subAccountId], references: [id], onDelete: Cascade)
  Action                Action[]
  AutomationInstance    AutomationInstance[]

  @@index([subAccountId])
  @@index([triggerId])
}

model AutomationInstance {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  automationId          String         
  Automation            Automation      @relation(fields: [automationId], references: [id], onDelete: Cascade)
  active                Boolean         @default(false)

  @@index([automationId])
}

enum ActionType {
  CREATE_CONTACT  
}

model Action {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  type                  ActionType
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  automationId          String         
  order                 Int
  Automation            Automation      @relation(fields: [automationId], references: [id], onDelete: Cascade)
  laneId                String          @default("0")

  @@index([automationId])
}

model Notification {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  notification          String
  garageId              String         
  subAccountId          String?        
  userId                String         

  User                  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Garage                Garage          @relation(fields: [garageId], references: [id], onDelete: Cascade)
  SubAccount            SubAccount?     @relation(fields: [subAccountId], references: [id], onDelete: Cascade)

  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt

  @@index([userId])
  @@index([garageId])
  @@index([subAccountId])
}

enum Plan {
  price_10MhuQIld5Bk5htqogRZXP2e
  price_10MhtcIld5Bk5htqx5CvF5mj
}

model Subscription {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  plan                  Plan?
  price                 String?
  active                Boolean         @default(false)

  priceId               String
  customerId            String
  currentPeriodEndDate  DateTime
  subscriptionId        String          @unique

  garageId              String?         @unique
  Garage                Garage?         @relation(fields: [garageId], references: [id])

  @@index([customerId])
}

model AddOns {
  id                    String          @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  active                Boolean         @default(false)
  priceId               String          @unique
  garageId              String?        
  Garage                Garage?          @relation(fields: [garageId], references: [id])

  @@index([garageId])
}